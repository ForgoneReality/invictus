/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/background.js":
/*!***************************!*\
  !*** ./src/background.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Background)\n/* harmony export */ });\n/* harmony import */ var _star__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./star */ \"./src/star.js\");\n/* harmony import */ var _ship__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ship */ \"./src/ship.js\");\n/* harmony import */ var _player__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./player */ \"./src/player.js\");\n/* harmony import */ var _drop__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./drop */ \"./src/drop.js\");\n\n//background.js\n\n\n\n\n\nclass Background{\n    constructor(width, height, level_id, context)\n    {\n        this.width = width;\n        this.height = height;\n        this.level_id = level_id;\n        this.context = context;\n        this.stars = [];\n        this.projectiles = [];\n        this.enemyprojectiles = [];\n        this.enemyships = [];\n        this.drops = [];\n        this.lasers = [];\n        this.createLevel(1);\n        this.initializeStars(context);\n\n        //stats\n        this.enemiesdefeated = 0;\n        this.gold = 0;\n    };\n\n    createLevel(level)\n    {\n        this.player = new _player__WEBPACK_IMPORTED_MODULE_2__[\"default\"]([this.width / 2, this.height - 50]);\n        this.mouse_x = this.width / 2;\n        this.mouse_y = 0;\n        let handleMousemove = (event) => {\n            this.mouse_x = event.x;\n            this.mouse_y = event.y;\n        };\n          \n        //note: as explained in Player#animate, movement and other spontaneous events cannot be added here\n        document.addEventListener('mousemove', handleMousemove);\n\n        if (level === 1)\n        {\n\n            // this.drops.push(new Drop([.5*this.width, -460], 3));\n            // this.enemyships.push(new Ship([.15*this.width, -100], 0, this)); //type 1\n            // this.enemyships.push(new Ship([.44 * this.width, -480], 0, this)); //type 1\n            // this.enemyships.push(new Ship([.55*this.width, -133], 1, this)); //type 2\n            // this.enemyships.push(new Ship([.24 * this.width, -700], 1, this)); //type 2\n            // this.enemyships.push(new Ship([.5 * this.width, -600], 2, this)); //type 3\n            // this.enemyships.push(new Ship([.32 * this.width, -510], 3, this)); //type 4\n            // this.enemyships.push(new Ship([.6*this.width, -780], 3, this)); //type 1\n            // this.enemyships.push(new Ship([.35 * this.width, -840], 2, this)); //type 3\n            // this.enemyships.push(new Ship([.24 * this.width, -985], 0, this)); //type 2\n            // this.enemyships.push(new Ship([.1 * this.width, -1050], 1, this)); //type 2\n            \n            // this.enemyships.push(new Ship([.8*this.width, -1090], 4, this)); \n            // this.enemyships.push(new Ship([.75*this.width, -333], 4, this)); \n            // this.enemyships.push(new Ship([.68*this.width, -1150], 5, this)); \n            // this.enemyships.push(new Ship([.13*this.width, -1200], 1, this)); \n            // this.enemyships.push(new Ship([.27*this.width, -1300], 3, this)); \n            // this.enemyships.push(new Ship([.43*this.width, -1400], 5, this)); \n            // this.enemyships.push(new Ship([.53*this.width, -1500], 2, this)); \n            // this.enemyships.push(new Ship([.63*this.width, -1640], 0, this)); \n            // this.enemyships.push(new Ship([.77*this.width, -1523], 4, this)); \n\n            // this.enemyships.push(new Ship([.23*this.width, -1776], 3, this)); \n            // this.enemyships.push(new Ship([.56*this.width, -1840], 3, this)); \n            // this.enemyships.push(new Ship([.4*this.width, -1890], 3, this)); \n            // this.enemyships.push(new Ship([.5*this.width, -1992], 4, this)); \n            // this.enemyships.push(new Ship([.1*this.width, -2040], 5, this)); \n            // this.enemyships.push(new Ship([.6*this.width, -2100], 4, this)); \n            // this.enemyships.push(new Ship([.25*this.width, -2150], 1, this)); \n            // this.enemyships.push(new Ship([.53*this.width, -2160], 1, this)); \n            // this.enemyships.push(new Ship([.17*this.width, -2245], 5, this)); \n            // this.enemyships.push(new Ship([.48*this.width, -2324], 2, this));\n\n            // this.enemyships.push(new Ship([.5*this.width, -2500], 0, this)); \n            // this.enemyships.push(new Ship([.38*this.width, -2570], 0, this)); \n            // this.enemyships.push(new Ship([.62*this.width, -2570], 0, this)); \n            // this.enemyships.push(new Ship([.26*this.width, -2640], 0, this)); \n            // this.enemyships.push(new Ship([.74*this.width, -2640], 0, this));\n            // this.enemyships.push(new Ship([.14*this.width, -2710], 0, this)); \n            // this.enemyships.push(new Ship([.87*this.width, -2710], 0, this));  \n\n            // this.drops.push(new Drop([.3*this.width, -2320], 1));\n            this.enemyships.push(new _ship__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([.12*this.width, -100], 6, this, true));  \n            \n        }\n    }\n\n    initializeStars(context)\n    {\n\n        for(let i = 0; i < 15; i++)\n        {\n            let posx = Math.random() * (this.width-10);\n            //let posy = 0;\n            \n            let size;\n            if (Math.random()*2 > 1.7)\n            {\n                size = Math.random()* 4 + 1;\n            }\n            else\n                size = Math.random()*2 + 1;\n            \n            let mystar = new _star__WEBPACK_IMPORTED_MODULE_0__[\"default\"](posx, Math.random()*1 + 0.2 + (size / (8)), size);\n\n            mystar.posY = Math.random()*this.height-10;\n            this.stars.push(mystar);\n\n            context.shadowBlur = 0;\n        }\n    }\n\n    animate(){\n        let context = this.context;\n        \n        context.fillStyle = \"black\";\n        context.fillRect(0, 0, this.width, this.height);\n        this.createStars(context);\n\n        if(this.enemiesdefeated === 1)\n        {\n            this.player.levelup(1);\n        }\n\n        if(key.isPressed(\" \") )\n        {\n            let proj = this.player.shootProjectile(this.mouse_x, this.mouse_y, 2);\n            if (proj)\n            {\n                this.projectiles = this.projectiles.concat(proj);\n            }\n        }\n        else\n        {\n            this.player.shootProjectile(null, null, -1);\n        }\n\n        this.updateAll(context);\n        this.player.animate(this.context, this.mouse_x, this.mouse_y);\n        this.checkCollisions(context);\n\n        this.updateUI(context);\n\n        requestAnimationFrame(this.animate.bind(this));\n       \n    }\n\n    createStars(context){\n        let numStars = 0;\n        for(let i=0; i<3; i++)\n        {\n            if(Math.random()*70 <= 1)\n            {\n                numStars++;\n            }\n        }\n        for(let j = 0; j< numStars; j++)\n        {\n            let posx = Math.random() * (this.width-10);\n            //let posy = 0;\n            \n            let size;\n            if (Math.random()*2 > 1.7)\n            {\n                size = Math.random()* 4 + 1;\n            }\n            else\n                size = Math.random()*2 + 1;\n\n            \n            let mystar = new _star__WEBPACK_IMPORTED_MODULE_0__[\"default\"](posx, Math.random()*1 + 0.2 + (size / (8)), size);\n            this.stars.push(mystar);\n            context.shadowBlur = 0;\n            // context.filter = \"none\";\n        }\n        \n    }\n\n    updateAll(context)\n    {\n        this.lasers.forEach((laser) => {\n            laser.animate(this.context);\n        })\n\n        for(let i = this.lasers.length - 1; i >= 0; i--) // problematic! need to go backwards\n        {\n            if(this.lasers[i].deleted)\n            {\n                setTimeout(()=> \n                {\n                    this.lasers.splice(i, 1);\n                }, 0);\n                \n            }\n        }\n\n\n        this.updateSomething(context, this.stars);\n        this.updateSomething(context, this.enemyships);\n\n        this.projectiles.forEach((proj) => {\n            proj.animate(this.context)\n        });\n\n        for(let i = this.projectiles.length - 1; i >= 0; i--) // problematic! need to go backwards\n        {\n            if(this.projectiles[i].outofBounds(this.width, this.height))\n            {\n                setTimeout(()=> \n                {\n                    this.projectiles.splice(i, 1);\n                }, 0);\n                \n            }\n        }\n\n        this.enemyprojectiles.forEach((proj) => {\n            proj.animate(this.context)\n        });\n\n        for(let i = this.enemyprojectiles.length - 1; i >= 0; i--)\n        {\n            if(this.enemyprojectiles[i].outofBounds(this.width, this.height))\n            {\n                // console.log(\"out of bounds!\");\n                setTimeout(()=> \n                {\n                    this.enemyprojectiles.splice(i, 1);\n                }, 0);\n            }\n        }\n\n        this.drops.forEach((drop) => {\n            drop.animate(this.context)\n        });\n\n        for(let i = this.drops.length - 1; i >= 0; i--)\n        {\n            if(this.drops[i].outofBounds(this.width, this.height))\n            {\n                setTimeout(()=> \n                {\n                    this.drops.splice(i, 1);\n                }, 0);\n            }\n        }\n    }\n\n    updateSomething(context, something){\n      \n        for(let i = something.length - 1; i >= 0; i--)\n        {\n            if(something[i].posY > this.height + 50)\n            {\n                something.splice(i, 1);\n            }\n        }\n        \n        something.forEach( (thingie) => {\n            thingie.animate(context);\n        })\n    }\n\n    checkCollisions(context)\n    {\n        //change to for-loop\n        for(let i = this.enemyships.length - 1; i >= 0; i--)\n        {\n            for(let j = this.projectiles.length - 1; j >= 0; j--)\n            {\n                if(this.collidesWith(this.enemyships[i], this.projectiles[j]))\n                {\n                    this.enemyships[i].health -= this.projectiles[j].damage;\n                    setTimeout(()=> \n                    {\n                        this.projectiles.splice(j, 1);\n                    }, 0);\n           \n                    \n                    if(this.enemyships[i].health <= 0)\n                    {\n                        this.handleEnemyDefeat(this.enemyships[i]);\n\n                        setTimeout(()=> \n                        {\n                            this.enemyships.splice(i, 1);\n                        }, 0);\n\n                        break;\n                    }\n\n            \n                }\n            }\n        }\n\n        for(let j = this.enemyprojectiles.length - 1; j >= 0; j--)\n        {\n            if(this.collidesWith(this.player, this.enemyprojectiles[j]))\n            {\n                this.player.dealDamage(this.enemyprojectiles[j].damage);\n\n                setTimeout(()=> \n                    {\n                        this.enemyprojectiles.splice(j, 1);\n                    }, 0);\n        \n            }\n        }\n\n        for(let j = this.lasers.length - 1; j >= 0; j--)\n        {\n            if(this.collidesWith(this.player, this.lasers[j]))\n            {\n                this.player.dealDamage(this.lasers[j].damage);\n\n                setTimeout(()=> \n                    {\n                        this.lasers.splice(j, 1);\n                    }, 0);\n        \n            }\n        }\n\n        for(let i = this.enemyships.length - 1; i >= 0; i--)\n        {\n            if(this.collidesWith(this.player, this.enemyships[i]))\n            {\n                this.player.dealDamage(Math.max(this.enemyships[i].damage, 50, )); //fix this\n                \n                \n                let n = this.normalizedVector(this.player, this.enemyships[i]);\n                this.player.collided = 20;\n                this.player.velX = n[0] * 13;\n                this.player.velY = n[1] * 13;\n\n                if(!this.enemyships[i].boss)\n                {\n                    this.enemyships[i].health -= 25;\n                    this.enemyships[i].collided = 13;\n                    this.enemyships[i].velX = n[0] * -13;\n                    this.enemyships[i].velY = n[1] * -13;   \n                }\n\n                if(this.enemyships[i].health <= 0)\n                {\n                    this.handleEnemyDefeat(this.enemyships[i]);\n\n                    setTimeout(()=> \n                        {\n                            this.enemyships.splice(i, 1);\n                        }, 0);\n                }\n        \n            }\n        }\n\n        for(let i = this.drops.length - 1; i >= 0; i--)\n        {\n            if(this.collidesWith(this.player, this.drops[i]))\n            {\n                switch(this.drops[i].type)\n                {\n                    case 0: //health pack\n                        this.player.health = Math.min(this.player.health + 500, this.player.basehealth, this.player.health + this.player.basehealth / 2);\n                        break;\n                    case 1: //double fire\n                        this.player.projectileType = 2;\n                        this.player.shotsLeft = 50;\n                        break;\n                    case 2: //money\n                        this.gold += Math.floor(Math.random()* 6) * 1000 + 5000;\n                        break;\n                    case 3: //gamma ray\n                        this.player.projectileType = 3;\n                        this.player.shotsLeft = 55;\n                        break;\n                }\n                setTimeout(()=> \n                    {\n                        this.drops.splice(i, 1);\n                    }, 0);\n            }\n        }\n    }\n\n    collidesWith(a, b)\n    {\n        if ((a.leftX() >= b.leftX() && a.leftX() <= b.rightX()) || (a.rightX() >= b.leftX() && a.rightX() <= b.rightX()))\n        {\n            if ((a.upY() >= b.upY() && a.upY() <= b.downY()) || (a.downY() >= b.upY() && a.downY() <= b.downY()))\n            {\n                return true;\n            }\n        }\n        if ((b.leftX() >= a.leftX() && b.leftX() <= a.rightX()) || (b.rightX() >= a.leftX() && b.rightX() <= a.rightX()))\n        {\n            if ((b.upY() >= a.upY() && b.upY() <= a.downY()) || (b.downY() >= a.upY() && b.downY() <= a.downY()))\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    normalizedVector(a, b)\n    {\n        let target_x = a.realX();\n        let target_y = a.realY();\n        let distX = target_x - b.realX();\n        let distY = target_y - b.realY();\n\n        length = Math.sqrt(distX * distX + distY * distY);\n        // this.normalVector = [Math.abs(distX) / length, Math.abs(distY) / length];\n        return [distX / length, distY / length];\n    }\n\n    updateUI(ctx)\n    {\n        ctx.fillStyle = '#ff4040';\n        ctx.strokeStyle = \"black\"\n        ctx.textBaseline = 'top';\n        ctx.font = '10pt Verdana';\n        let healthtext = `Health: ${Math.floor(this.player.health)} / ${Math.floor(this.player.basehealth)}`;\n        ctx.textAlign = 'left';\n        // const t_width = ctx.measureText(text).width;\n        // const t_height = ctx.measureText(text).height;\n        ctx.fillText(healthtext, 20, this.height - 50);\n\n        let goldtext = `Gold: ${Math.floor(this.gold)}`;\n        ctx.textAlign = 'right';\n        ctx.fillStyle = 'gold';\n        ctx.fillText(goldtext, this.width-20, this.height - 50);\n        ctx.textAlign = 'start';\n        \n    }\n\n    //need to make sound & explosion\n    handleEnemyDefeat(e_ship)\n    {\n        this.enemiesdefeated++;\n        this.gold += e_ship.gold;\n        let v = e_ship.value;\n\n        let num = Math.floor(Math.random()*100 * v);\n        //these numbers will change\n\n        // if(num > 140)//ultimate drop\n        // {\n\n        // }\n        // else if(num > 120)//super rare drop\n        // {\n\n        // }\n        // else if(num > 110) //very rare drop\n        // {\n\n        // }\n        if (num > 95)// rare drop: missiles,\n        {\n            this.drops.push(new _drop__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([e_ship.posX, e_ship.posY], 3));\n        }\n        else if (num > 65) //uncommon drop: gold, shield, health, missiles\n        {\n            let m = Math.random() * 10;\n            if (m < 3)\n                this.drops.push(new _drop__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([e_ship.posX, e_ship.posY], 1));\n            else if (m < 7)\n                this.drops.push(new _drop__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([e_ship.posX, e_ship.posY], 2));\n            else\n                this.drops.push(new _drop__WEBPACK_IMPORTED_MODULE_3__[\"default\"]([e_ship.posX, e_ship.posY], 0));\n        }\n        else{\n            //no drop\n        }\n\n    }\n\n\n    \n}\n\n\n\n//# sourceURL=webpack:///./src/background.js?");

/***/ }),

/***/ "./src/circleDamageProjectile.js":
/*!***************************************!*\
  !*** ./src/circleDamageProjectile.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CircleDamageProjectile)\n/* harmony export */ });\n/* harmony import */ var _projectile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projectile */ \"./src/projectile.js\");\n\n\nclass CircleDamageProjectile extends _projectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]{\n    constructor(position, velocity, radius, owner, type, damage, blur=0, arc_start, arc_end) //owner might be dead code\n    {\n        super(position, velocity, radius, true, owner, type);\n        this.blur = blur;\n        this.damage = damage;\n        this.type = type;\n        if (arc_start === undefined)\n        {\n            this.arc_start = 0;\n        }\n        else\n        {\n            this.arc_start = arc_start;\n        }\n        if (arc_end === undefined)\n            this.arc_end = Math.PI * 2;\n        else\n            this.arc_end = arc_end;\n    }\n\n    draw(context)\n    {\n        function setShadow(ctx, color, ox, oy, blur) {\n            ctx.shadowColor = color;\n            ctx.shadowOffsetX = ox;\n            ctx.shadowOffsetY = oy;\n            ctx.shadowBlur = blur;\n        }\n\n        let gradient_a;\n        let gradient_b;\n        let gradient_c;\n        let mid;\n        let color;\n        if(this.type === 0)\n        {\n            color = \"red\";\n            gradient_a = \"#FF0000\";\n            gradient_b = \"#AD0303\";\n        }\n        else if (this.type === 1)\n        {\n            color = \"pink\";\n            gradient_b = \"#FF4da6\";\n            gradient_a = \"#CC0099\";\n        }\n        else if (this.type === 3)\n        {\n            color = \"cyan\";\n            gradient_a = \"  #b3ffff\";\n            gradient_b = \"#00FFFF\";\n        }\n        else if (this.type === 4)\n        {\n            color = \"purple\";\n            gradient_a = \"#DEA5FF\";\n            gradient_b = \"#6A00A7\";\n        }\n        else if (this.type === 5)\n        {\n            color = \"darkgreen\";\n            gradient_b = \"#00A31A\";\n            gradient_a = \"#78FF54\";\n        }\n\n   \n        // context.save();\n        context.beginPath();\n        setShadow(context, color, 0, 0, this.blur);\n        let grd = context.createRadialGradient(this.posX, this.posY, 0, this.posX, this.posY, this.size / 2);\n        if(gradient_c === undefined)\n        {\n            grd.addColorStop(0, gradient_a);\n            grd.addColorStop(1, gradient_b);\n        }\n        else\n        {\n            grd.addColorStop(0, gradient_a);\n            grd.addColorStop(mid, gradient_b);\n            grd.addColorStop(1, gradient_c);\n        }\n        \n        context.fillStyle = grd;\n\n        context.arc(this.posX, this.posY, this.size, this.arc_start, this.arc_end, false);\n        context.fill();\n        context.closePath();\n        // context.restore();\n\n        context.shadowBlur = 0;\n\n        // context.save();\n        // context.shadowColor = this.color;\n        // context.shadowBlur = 9;\n        // context.fillColor = this.color;\n        // // context.translate(this.posX+this.width/2, this.posY+this.size/2);\n        // // context.rotate(this.degrees*Math.PI/180.0);\n        // // context.translate(-this.posX-this.width/2, -this.posY-this.size/2);\n        // context.fillRect(this.posX, this.posY, 4, 32);\n        // context.restore();\n\n        // context.shadowBlur = 0;\n\n    }\n\n    leftX()\n    {\n        return this.posX;\n    }\n\n    rightX()\n    {\n        return this.posX + 2 * this.size;\n    }\n\n    upY()\n    {\n        return this.posY;\n    }\n\n    downY()\n    {\n        return this.posY + 2 * this.size;\n    }\n    \n}\n\n//# sourceURL=webpack:///./src/circleDamageProjectile.js?");

/***/ }),

/***/ "./src/drop.js":
/*!*********************!*\
  !*** ./src/drop.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Drop)\n/* harmony export */ });\n/* harmony import */ var _projectile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projectile */ \"./src/projectile.js\");\n\n\n\nconst TYPES3 = [\n    {\n            //healing\n            img: '../images/heart.png',\n            color: \"red\",\n            blur: 5,\n            scale: .06, \n            rarity: \"common\"\n    },\n    {\n            //double fire\n            img: '../images/drop1.png',\n            color: \"white\",\n            blur: 0,\n            scale: .04, \n            rarity: \"common\"\n    },\n    {\n        img: '../images/gold.png',\n        color: \"gold\",\n        blur: 0,\n        scale: .1, \n        rarity: \"common\"\n    },\n    { \n        //gamma rays\n        img: '../images/gamma.png',\n        color: \"green\",\n        blur: 0,\n        scale: .1, \n        rarity: \"uncommon\"\n    }\n];\n\nclass Drop extends _projectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(position, type)//color optional\n    {\n        //position, velocity, size, collidable, owner, type)\n\n        super(position, [0, 1.75], 0.25, true, 3, type);\n        const image = new Image();\n        image.src = TYPES3[type].img;\n        image.onload = () => {\n            this.image = image;\n            this.width = image.width * TYPES3[type].scale;\n            this.height = image.height * TYPES3[type].scale;\n        }\n    }\n\n    draw(context)\n    {\n        if(this.image)\n        {\n        // context.shadowColor = this.color;\n        // context.shadowBlur = this.blur;\n            context.save();\n            context.drawImage(this.image, this.posX, this.posY, this.width, this.height);\n            context.restore();\n            \n        }\n    }   \n\n    leftX() //scuffed\n    {\n        return this.posX;\n    }\n\n    rightX() //scuffed\n    {\n        return this.posX + (this.size + this.width) / 2;\n    }\n\n    upY() //scuffed\n    {\n        return this.posY;\n    }\n\n    downY() //scuffed\n    {\n        return this.posY + (this.size + this.width) / 2;\n    }\n\n    outofBounds(width, height)\n    {\n        return (this.posX >= width || this.posY >= height)\n    }\n\n}\n\n\n//# sourceURL=webpack:///./src/drop.js?");

/***/ }),

/***/ "./src/game.js":
/*!*********************!*\
  !*** ./src/game.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var _background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./background */ \"./src/background.js\");\n/* harmony import */ var _starfield__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./starfield */ \"./src/starfield.js\");\n// //game.js\n\n\n\nclass Game\n{\n    constructor(canvas){\n        this.canvas = canvas;\n        this.canvas.width = innerWidth;\n        this.canvas.height = innerHeight;\n        this.context = this.canvas.getContext('2d');\n        this.state = \"new-game\";\n        this.level = 1;\n        \n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        this.loading_screen();\n\n        // this.start();//initially new game every time... loading functionality later\n    }\n\n    loading_screen()\n    {\n        const loadingscreen = document.querySelector('#loading');\n        const new_game = document.querySelector('#new-game-butt');\n\n        new_game.addEventListener(\"click\", () =>\n        {\n            loadingscreen.style.display = 'none';\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            this.starField.continue = false; //necessary for memory and garbage handler issues\n            this.starField = null; //:/ kind of annoying tbh\n            // this.canvas = null;\n            // this.context = null;\n            this.start();\n        });\n\n        this.starField = new _starfield__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.canvas);\n\n    }\n\n    start()\n    {\n        // let canvas = document.getElementById('game-canvas');\n        // let context = canvas.getContext('2d');\n\n        this.background = new _background__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.width, this.height, this.level, this.context);\n        this.state = \"fighting\";\n        this.background.animate();\n        // for now the game just instantly plays the \"level\" which is currently misnamed as background\n        // this.animate();\n    }\n}\n\n\n//# sourceURL=webpack:///./src/game.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _game__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./game */ \"./src/game.js\");\n\n//index.js\n\n\ndocument.addEventListener('DOMContentLoaded', function(event) {\n    console.log('DOM fully loaded and parsed');\n    const canvas = document.getElementById('game-canvas');\n    const gam = new _game__WEBPACK_IMPORTED_MODULE_0__[\"default\"](canvas);\n});\n\n\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),

/***/ "./src/laserDamageProjectile.js":
/*!**************************************!*\
  !*** ./src/laserDamageProjectile.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LaserDamageProjectile)\n/* harmony export */ });\n/* harmony import */ var _projectile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projectile */ \"./src/projectile.js\");\n\n\nclass LaserDamageProjectile extends _projectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]{\n    constructor(position, velocity, angle, length, owner, type, damage, blur=0, width=2, img)\n    {\n        super(position, velocity, length, true, owner, type);\n        this.blur = blur;\n        this.damage = damage;\n        this.width = width;\n        this.degrees = angle;\n \n        \n        this.isImage = false; //not good code... might need to refactor into separate class if troublesome\n        if(img != undefined)\n        {\n            this.isImage = true;\n            let scale;\n            if (type === 3)\n            {\n                scale = 0.1;\n            }\n\n            const image = new Image();\n            image.src  = img;\n            image.onload = () => {\n                this.image = image;\n                this.width = image.width * scale;\n                this.height = image.height * scale;\n                \n            }\n        }       \n    }\n\n    draw(context)\n    {\n        function setShadow(ctx, color, ox, oy, blur) {\n            ctx.shadowColor = color;\n            ctx.shadowOffsetX = ox;\n            ctx.shadowOffsetY = oy;\n            ctx.shadowBlur = blur;\n        }\n\n        let color;\n        if(this.type === 0)\n        {\n            color = \"red\";\n        }\n        else if(this.type === 2)\n        {\n            color = \"#DDB300\";\n        }\n        else if (this.type === 3)\n        {\n            color = \"#39FF14\";\n        }\n    \n        context.save();\n        context.shadowColor = color;\n        setShadow(context, color, 0, 0, this.blur);\n        context.fillStyle = color;\n        context.translate(this.posX+this.width/2, this.posY+this.size/2);\n        context.rotate(this.degrees*Math.PI/180.0);\n        context.translate(-this.posX-this.width/2, -this.posY-this.size/2);\n        if(!this.isImage)\n        {\n            context.fillRect(this.posX, this.posY, this.width, this.size);\n        }\n        else\n        {\n            if (this.image)\n                context.drawImage(this.image, this.posX, this.posY, this.width, this.height);\n        }\n        context.restore();\n\n        context.shadowBlur = 0;\n    }\n\n    leftX()\n    {\n        if(this.type === 3)\n        {\n            return this.posX + this.width * .25\n        } \n        return this.posX\n    }\n\n    rightX()\n    {\n        if(this.type === 3)\n        {\n            return this.posX + this.width * .75\n        } \n        return this.posX + this.width\n    }\n\n    upY()\n    {\n        if(this.type === 3)\n        {\n            return this.posY + this.height * .2\n        } \n        return this.posY\n    }\n\n    downY()\n    {\n        if(this.type === 3)\n        {\n            return this.posY + this.height * .8\n        } \n        return this.posY\n    }\n    \n}\n\n//# sourceURL=webpack:///./src/laserDamageProjectile.js?");

/***/ }),

/***/ "./src/laserbeam.js":
/*!**************************!*\
  !*** ./src/laserbeam.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LaserBeam)\n/* harmony export */ });\n//projectile.js\n//just pass context around into draw and animate specifically\n\n\nclass LaserBeam {\n    constructor(position, velocity, length, width, damage, type, angle)//null optional\n    {\n        this.posX = position[0];\n        this.posY = position[1];\n        this.velX = velocity[0];\n        this.velY = velocity[1];\n        this.length = length;\n        this.width = width;\n        this.type = type;\n        this.damage = damage;\n        this.angle = angle;\n    }\n\n    draw(context)\n    {\n        function setShadow(ctx, color, ox, oy, blur) {\n            ctx.shadowColor = color;\n            ctx.shadowOffsetX = ox;\n            ctx.shadowOffsetY = oy;\n            ctx.shadowBlur = blur;\n        }\n\n        let color;\n        if(this.type === 0)\n        {\n            color = \"red\";\n        }\n    \n        context.save();\n        \n    \n        setShadow(context, color, 0, 0, 100);\n        // let grd = context.createLinearGradient(this.posX - this.width / 4, this.posY, this.posX - this.width / 2, this.posY);\n        // grd.addColorStop(1, '#DE4040');\n        // grd.addColorStop(0, 'red');\n\n\n        // context.fillStyle = grd;\n        // context.fillRect(this.posX - this.width / 2, this.posY, this.width/4, this.length);\n\n        // let grd2 = context.createLinearGradient(this.posX + this.width / 4, this.posY, this.posX + this.width / 2, this.posY);\n        // grd2.addColorStop(0, '#DE4040');\n        // grd2.addColorStop(1, 'red');\n        // context.fillStyle = grd2;\n\n        // context.fillRect(this.posX + this.width / 4, this.posY, this.width/4, this.length);\n\n        context.fillStyle = \"red\";\n\n       \n        context.fillRect(this.posX - this.width / 3, this.posY, 2 * this.width/3, this.length);\n        context.shadowBlur = 0;\n        context.restore();\n\n       \n    }\n\n    animate(context)\n    {\n        this.move();\n        this.draw(context);\n    }\n\n    move() //default move, no acceleration. projectiles, stars, some enemy ships, drops, etc.\n    {\n        this.posX += this.velX;\n        this.posY += this.velY;\n    }\n    \n    // outofBounds(width, height)\n    // {\n    //     return (this.posX < 0 || this.posY < 0 || this.posX >= width || this.posY >= height)\n    // }\n\n     outofBounds(width, height)\n    {\n        return false;\n    }\n\n    leftX()\n    {\n        return this.posX;\n    }\n\n    rightX()\n    {\n        return this.posX + this.width;\n    }\n\n    upY()\n    {\n        return 0;\n    }\n\n    downY()\n    {\n        return this.length;\n    }\n\n}\n\n\n//# sourceURL=webpack:///./src/laserbeam.js?");

/***/ }),

/***/ "./src/player.js":
/*!***********************!*\
  !*** ./src/player.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Player)\n/* harmony export */ });\n/* harmony import */ var _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./circleDamageProjectile */ \"./src/circleDamageProjectile.js\");\n/* harmony import */ var _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./laserDamageProjectile */ \"./src/laserDamageProjectile.js\");\nlet SAFEFRAMES = 5;\n\n\n\n\n\nconst TYPES2 = [\n    { \n        //Basic Player Ship\n        basehealth: 500,\n        basedamage: 25,\n        img: '../images/enemyship1.png',\n        scale: .022, \n        defaultprojType: 0\n    },\n    {\n            //Level 2 Ship\n            basehealth: 1000,\n            basedamage: 35,\n            img: '../images/enemyship2.png',\n            scale: .022, \n            defaultprojType: 1\n    }\n]\nclass Player {\n    constructor(position) //more later, type?\n    {\n        this.posX = position[0];\n        this.posY = position[1];\n        this.velX = 0;\n        this.velY = 0;\n\n        this.canvasX = this.posX * 2;\n        this.canvasY = this.posY + 50;\n        this.ship_level = 0;\n\n        const image = new Image();\n        image.src  = '../images/playership1.png';\n        image.onload = () => {\n            this.image = image;\n            const SCALE = 0.02;\n            this.width = image.width * SCALE;\n            this.height = image.height * SCALE;\n        }\n        this.basehealth = TYPES2[this.ship_level].basehealth;\n        this.health = this.basehealth; \n        this.basedamage = TYPES2[this.ship_level].basedamage;\n        this.regen = 0.05;\n\n        this.movedX = 0;\n        this.movedY = 0;\n        this.degrees = 0;\n        // this.initialThrottleY = 0;\n\n        // this.color = \"red\";\n        this.normalVector = [0,-1];\n        this.projectileType = 0;\n        this.shotsLeft = 0;\n        this.shootTimer = 0;\n\n        this.collided = 0;\n        this.interval = 1; //multi-purpose for variying shots\n    }\n\n    draw(context, mouse_x, mouse_y)\n    {\n        if (this.image)\n        {\n        this.updateAngleAndNormalizedVector(mouse_x, mouse_y);\n        // console.log(this.degrees);\n        // console.log(this.normalVector);\n\n        context.save();\n        context.shadowColor = \"red\";\n        context.shadowBlur = 9;\n        context.translate(this.posX+this.width/2, this.posY+this.height/2);\n        context.rotate(this.degrees*Math.PI/180.0);\n        context.translate(-this.posX-this.width/2, -this.posY-this.height/2);\n        context.drawImage(this.image, this.posX, this.posY, this.width, this.height);\n        context.restore();\n        context.shadowBlur = 0;\n        }\n\n\n    }\n\n    animate(context, mouse_x, mouse_y)\n    {\n        //BINDING KEYS DOES NOT WORK\n        //It creates a lag between whether it determines a key is being tapped or held (~1 second)\n        //which makes movement very, very slow and clunky\n        //so have to do it this way instead. Neither keymaster.js's bind nor built-in events work\n        // console.log(this.posX, this.posY);\n        if(this.health < this.basehealth)\n        {\n            this.health += this.regen;\n        }\n\n        if(this.collided <= 0)\n        {\n            if(key.isPressed(\"up\") || key.isPressed(\"w\"))\n            {\n\n                this.power(\"up\");\n            }\n            if(key.isPressed(\"right\") || key.isPressed(\"d\"))\n            {\n                this.power(\"right\");\n            }\n            if(key.isPressed(\"down\")|| key.isPressed(\"s\"))\n            {\n                this.power(\"down\");\n            }\n            if(key.isPressed(\"left\")|| key.isPressed(\"a\"))\n            {\n                this.power(\"left\");\n            }\n        }\n        else\n        {\n            this.collided -= 1;\n        }\n        \n        this.move();\n        this.applyGravity();\n        if(mouse_x === -1 && this.mouse_y === -1)\n            this.draw(context, this.posX, 0);\n        else \n            this.draw(context, mouse_x, mouse_y);\n    }\n\n    move()\n    {\n        this.posX += this.velX;\n        if(this.posX<50)\n        {\n            this.posX = 50;\n        }\n        if(this.posX>this.canvasX - 50)\n        {\n            this.posX = this.canvasX - 50;\n        }\n        this.posY += this.velY;\n        if(this.posY<50)\n        {\n            this.posY = 50;\n        }\n        if(this.posY>this.canvasY - 50)\n        {\n            this.posY = this.canvasY - 50;\n        }\n    }\n\n    levelup(level)\n    {\n        if (this.ship_level >= level)\n        {\n            return;\n        }\n        this.ship_level = level;\n        this.projectileType = TYPES2[level].defaultprojType;\n        \n        if (level === 1)\n        {\n            const image = new Image();\n            image.src  = '../images/playership2.png';\n            image.onload = () => {\n                this.image = image;\n                const SCALE = 0.02;\n                this.width = image.width * SCALE;\n                this.height = image.height * SCALE;\n            }\n        } \n        this.basehealth = TYPES2[level].basehealth;\n        this.health = this.basehealth;\n        this.basedamage = TYPES2[level].basedamage;\n    }\n\n    power(direction)\n    {\n        const MAXSPEED = 10;\n        const MINSPEED = MAXSPEED * -1; //can also use Math.abs()\n        switch(direction)\n        {\n            case \"up\":\n                if(this.velY>-4)\n                {\n                    this.velY = -4;\n                }\n                else\n                {\n                this.velY -= 0.45;\n                }\n                if(this.velY < MINSPEED)\n                {\n                    this.velY = MINSPEED;\n                }\n                this.movedY = SAFEFRAMES;\n                break;\n            case \"down\":\n                if(this.velY<4)\n                {\n                    this.velY = 4;\n                }\n                else\n                {\n                    this.velY += 0.45;\n                }\n                if(this.velY > MAXSPEED)\n                {\n                    this.velY = MAXSPEED;\n                }\n                this.movedY = SAFEFRAMES;\n                break;\n            case \"right\":\n                if(this.velX<4)\n                {\n                    this.velX = 4;\n                }\n                else\n                {\n                this.velX += 0.45;\n                }\n                if(this.velX > MAXSPEED)\n                {\n                    this.velX = MAXSPEED;\n                }\n                this.movedX = SAFEFRAMES;\n                break;\n            case \"left\":\n                if(this.velX>-4)\n                {\n                    this.velX = -4;\n                }\n                else\n                {\n                this.velX -= 0.45;\n                }\n                if(this.velX < MINSPEED)\n                {\n                    this.velX = MINSPEED;\n                }\n                this.movedX = SAFEFRAMES;\n                break;\n        }\n    }\n    \n    applyGravity()\n    {\n        if(this.movedX <= 0)\n        {\n            let x = Math.abs(this.velX);\n            if (x < 0.7)\n            {\n                this.velX = 0;\n            }\n            else if (x < 1.3)\n            {\n                this.velX = this.velX * 0.4;\n            }\n            else if (x < 2.5)\n            {\n                this.velX = this.velX * 0.6;\n            }\n            else if (x < 5)\n            {\n                this.velX = this.velX * 0.7;\n            }\n            else\n            {\n                this.velX = this.velX * 0.8;\n            }\n\n        }\n        else\n        {\n            this.movedX -= 1;\n        }\n        if(this.movedY <= 0)\n        {\n            let y = Math.abs(this.velY);\n            if (y < 0.7)\n            {\n                this.velY = 0;\n            }\n            else if (y < 1.3)\n            {\n                this.velY = this.velY * 0.4;\n            }\n            else if (y < 2.5)\n            {\n                this.velY = this.velY * 0.6;\n            }\n            else if (y < 5)\n            {\n                this.velY = this.velY * 0.7;\n            }\n            else\n            {\n                this.velY = this.velY * 0.8;\n            }\n        }\n        else\n        {\n            this.movedY -= 1;\n        }\n    }\n\n    shootProjectile(mouse_x, mouse_y)\n    {\n        let type = this.projectileType;\n        let mx;\n        let my;\n        if(mouse_x === -1 && mouse_y === -1)\n        {\n            mx = this.realX();\n            my = 0;\n        }\n        else\n        {\n            mx = mouse_x;\n            my = mouse_y;\n        }\n        this.updateAngleAndNormalizedVector(mouse_x, mouse_y);\n        let speed;\n        let cooldown;\n        switch(type)\n        {\n            case -1:\n                this.shootTimer -= 1;\n                return undefined;\n                break;\n            case 0: //red ball center\n                speed = 12;\n                cooldown = 8;\n                if(this.shootTimer <= 0)\n                {\n                    let projs = [];\n                    this.shootTimer = cooldown;\n                    let offset_x = 17;\n                    let offset_y = -30;// defaults for level === 1\n                    if (this.interval === 1)\n                    {\n                        let rotate_scaler = this.offset(offset_x, offset_y);\n                        projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler[0], this.realY() + rotate_scaler[1]], [speed * this.normalVector[0], speed*this.normalVector[1]], this.degrees, 20, 1, 0, this.basedamage, 4));\n                        this.interval = 0;\n                    }\n                    else if (this.interval === 0)\n                    {\n                        let rotate_scaler2 = this.offset(offset_x * -1, offset_y);\n                        projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler2[0], this.realY() + rotate_scaler2[1]], [speed * this.normalVector[0], speed*this.normalVector[1]], this.degrees, 20, 1, 0, this.basedamage, 4));\n                        this.interval = 1;\n                    }\n                    return projs;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                    return undefined;\n                }\n            case 1: //basic lasers double\n               \n                speed = 12;\n                cooldown = 12;\n                if(this.shootTimer <= 0)\n                {\n                    let projs = [];\n                    this.shootTimer = cooldown;\n                    let offset_x = 17;\n                    let offset_y = -40;// defaults for level === 1\n\n                    let rotate_scaler = this.offset(offset_x, offset_y);\n                    let rotate_scaler2 = this.offset(offset_x * -1, offset_y);\n                    \n\n                    projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler[0], this.realY() + rotate_scaler[1]], [speed * this.normalVector[0], speed*this.normalVector[1]], this.degrees, 20, 1, 0, this.basedamage, 4));\n                    projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler2[0], this.realY() + rotate_scaler2[1]], [speed* this.normalVector[0], speed*this.normalVector[1]], this.degrees, 20, 1, 0, this.basedamage, 4));\n                    return projs;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                    return undefined;\n                }\n                //remember to return an array!\n                break;\n            case 2: //double shot\n                speed = 12;\n                cooldown = 12;\n                if(this.shootTimer <= 0)\n                {\n                    this.shotsLeft--;\n                    let projs = [];\n                    this.shootTimer = cooldown;\n                    let offset_x = 17;\n                    let offset_y = -40;// defaults for level === 1\n                    if (this.ship_level === 0)\n                    {\n                        offset_y = -30;\n                    }\n\n                    let rotate_scaler = this.offset(offset_x, offset_y);\n                    let rotate_scaler2 = this.offset(offset_x * -1, offset_y);\n                    \n\n                    let x = this.normalVector[0];\n                    let y = this.normalVector[1];\n\n                    let d = (this.degrees * Math.PI / 180);\n                    let x_modifier2 = x * Math.cos(Math.PI / 6) - y * Math.sin(Math.PI / 6);\n                    let y_modifier2 = x * Math.sin(Math.PI / 6) + y * Math.cos(Math.PI / 6);\n                    let x_modifier = x * Math.cos(- Math.PI / 6) - y * Math.sin(- Math.PI / 6);\n                    let y_modifier = x * Math.sin(- Math.PI / 6) + y * Math.cos(- Math.PI / 6);\n                    console.log([x_modifier,y_modifier]);\n\n                    projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler[0], this.realY() + rotate_scaler[1]], [speed * this.normalVector[0], speed*this.normalVector[1]], this.degrees, 20, 1, 0, this.basedamage, 4));\n                    projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler2[0], this.realY() + rotate_scaler2[1]], [speed* this.normalVector[0], speed*this.normalVector[1]], this.degrees, 20, 1, 0, this.basedamage, 4));\n                    projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler[0], this.realY() + rotate_scaler[1]], [speed * x_modifier2, speed * y_modifier2], this.degrees + 30, 20, 1, 0, this.basedamage, 4));\n                    projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler2[0], this.realY() + rotate_scaler2[1]], [speed* x_modifier, speed * y_modifier], this.degrees - 30, 20, 1, 0, this.basedamage, 4));\n                   \n                    if (this.shotsLeft <= 0)\n                    {\n                        this.projectileType = TYPES2[this.ship_level].defaultprojType;\n                    }\n                    return projs;\n                    \n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                    return undefined;\n                }\n            case 3:\n                speed = 17 ;\n                cooldown = 6;\n                if(this.shootTimer <= 0)\n                {\n                    this.shotsLeft--;\n                    let projs = [];\n                    this.shootTimer = cooldown;\n                    let offset_x = 0;\n                    let offset_y = -40;// defaults for level === 1\n\n                    let rotate_scaler = this.offset(offset_x, offset_y);\n\n                    projs.push(new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + rotate_scaler[0], this.realY() + rotate_scaler[1]], [speed * this.normalVector[0], speed*this.normalVector[1]], this.degrees, 20, 1, 3, this.basedamage * 2.5, 4, 2, \"../images/gamma.png\"));\n                    if (this.shotsLeft <= 0)\n                    {\n                        this.projectileType = TYPES2[this.ship_level].defaultprojType;\n                    }\n                    \n                    return projs;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                    return undefined;\n                }\n                //remember to return an array!\n                break;\n\n            default:\n                // console.error(\"unknown projectile type\");\n        }\n    }\n\n    dealDamage(dmg)\n    {\n        this.health -= dmg;\n        if(this.health <= 0)\n        {\n            // alert(\"YOU LOSE!\");\n            exit;\n        }\n    }\n\n    updateAngleAndNormalizedVector(mouse_x, mouse_y)\n    {\n        let distX = mouse_x - this.realX();\n        let distY = mouse_y - this.realY();\n        if(distX === 0)\n        {\n            if(this.realY() > mouse_y)\n            {\n                this.degrees = 180;\n            }\n            else\n                this.degrees = 0;\n        }\n        else if (distY === 0)\n        {\n            if(distX > 0)\n            {\n                this.degrees = 90;\n            }\n            else\n            {\n                this.degrees = 270;\n            }\n        }\n        else\n        {//beware y is on top not bototm\n            if(distX > 0)\n            {\n                this.degrees = 90 + ((Math.atan(distY / distX)) * 180.0 / Math.PI);\n            }\n            else\n            {\n                this.degrees = 270 + ((Math.atan(distY / distX)) * 180.0 / Math.PI);\n            }\n        }\n\n        length = Math.sqrt(distX * distX + distY * distY);\n        // this.normalVector = [Math.abs(distX) / length, Math.abs(distY) / length];\n        this.normalVector = [distX / length, distY / length];\n    }\n\n    realX(){ //INCOMPLETE - NEEDS TO FACTOR IN ANGLE!! ... or does it? center doesn't change when angle changes\n        return this.posX + this.width / 2 + 1;\n    }\n\n    realY(){ \n        return this.posY + this.height * .3;\n    }\n\n    //#offset returns the new (x,y) relative to center after rotating to this.degrees\n    offset(x, y, deg = 0) //x,y relative to center, which should be realX() and real(Y), prior to rotation\n    {\n        //apply matrix transformation of form \n        //R = |cos θ  - sin θ |\n        //    | sin θ   cos θ |\n        //to apply rotational transformation by changing basis vectors \n\n        let degrees = this.degrees + deg; //setup\n        //usually -90 but because y is going positive going down, don't have to\n\n        let c = Math.cos(degrees * Math.PI / 180.0);\n        let s = Math.sin(degrees * Math.PI / 180.0);\n\n        return [x * c - y * s, x * s + y * c];\n    }\n\n    leftX()\n    {\n        return this.posX;\n    }\n\n    rightX()\n    {\n        return this.posX + this.width;\n    }\n\n    upY()\n    {\n        return this.posY;\n    }\n\n    downY()\n    {\n        return this.posY + this.height;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/player.js?");

/***/ }),

/***/ "./src/projectile.js":
/*!***************************!*\
  !*** ./src/projectile.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Projectile)\n/* harmony export */ });\n//projectile.js\n//just pass context around into draw and animate specifically\n\n\nclass Projectile {\n    constructor(position, velocity, size, collidable, owner, type)//color optional\n    {\n        this.posX = position[0];\n        this.posY = position[1];\n        this.velX = velocity[0];\n        this.velY = velocity[1];\n        this.size = size;\n        this.collidable = collidable;\n        this.type = type;\n        this.owner = owner; //1 ally, 2 enemy, 3 neutral\n    }\n\n    draw()\n    {\n        console.error(\"Projectile#draw() should be overridden\");\n    }\n\n    animate(context)\n    {\n        this.move();\n        if (this.posY >= 0)\n            this.draw(context);\n    }\n\n    move() //default move, no acceleration. projectiles, stars, some enemy ships, drops, etc.\n    {\n        this.posX += this.velX;\n        this.posY += this.velY;\n    }\n    \n    outofBounds(width, height)\n    {\n        return (this.posX < 0 || this.posY < 0 || this.posX >= width || this.posY >= height)\n    }\n\n}\n\n\n//# sourceURL=webpack:///./src/projectile.js?");

/***/ }),

/***/ "./src/ship.js":
/*!*********************!*\
  !*** ./src/ship.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Ship)\n/* harmony export */ });\n/* harmony import */ var _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./circleDamageProjectile */ \"./src/circleDamageProjectile.js\");\n/* harmony import */ var _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./laserDamageProjectile */ \"./src/laserDamageProjectile.js\");\n/* harmony import */ var _laserbeam__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./laserbeam */ \"./src/laserbeam.js\");\n// let SAFEFRAMES = 5;\n\n\n\n\n\nconst TYPES = [\n    { \n        //Basic Enemy Ship\n        velocity: [0, 1.65 * (0.4 + Math.random() * 0.8)],\n        endvelocity: [0, 1.65],\n        health: 135,\n        damage: 50,\n        img: '../images/enemyship1.png',\n        color: \"red\",\n        blur: 0,\n        rotatable: false,\n        scale: .022, \n        shootTimerInit: 50, \n        gold: 1500,\n        value: 1,\n        shotsLeft: 40\n    },\n    { \n        //Purple Corner Shooting Enemy Ship\n        velocity: [0, 1    * (0.4 + Math.random() * 0.8)],\n        endvelocity: [0, 1],\n        health: 175,\n        damage: 60,\n        img: '../images/enemyship2.png',\n        color: \"pink\",\n        blur: 0,\n        rotatable: false,\n        scale: .022, \n        shootTimerInit: 50, \n        gold: 2000,\n        value: 1.03,\n        shotsLeft: 40\n    },\n    {\n         //yellow dude who zooms in but shoot slows and has pauses, tanky hp\n         velocity: [0, 5],\n         endvelocity: [0, 1.4],\n         health: 250,\n         damage: 40,\n         img: '../images/enemyship3.png',\n         color: \"yellow\",\n         blur: 0,\n         rotatable: false,\n         scale: .022, \n         shootTimerInit: 50, \n         gold: 2000,\n         value: 1.04,\n         shotsLeft: 8\n    },\n    {\n        //Blue dude who rapidly zooms in \n        velocity: [0, 10.2],\n        endvelocity: [0, 1.8],\n        health: 150,\n        damage: 33,\n        img: '../images/enemyship4.png',\n        color: \"cyan\",\n        blur: 0,\n        rotatable: true,\n        scale: .022, \n        shootTimerInit: 32, \n        gold: 2200,\n        value: 1.06,\n        shotsLeft: 8\n    },\n    {\n        //Purple dude who actively shoots (slowly) at player \n        velocity: [0, 1.6],\n        endvelocity: [0, 1.6],\n        health: 165,\n        damage: 45,\n        img: '../images/enemyship5.png',\n        color: \"purple\",\n        blur: 0,\n        rotatable: true,\n        scale: .1, \n        shootTimerInit: 20, \n        gold: 2100,\n        value: 1.05,\n        shotsLeft: 3\n    },\n    {\n        velocity: [0, 0.6],\n        endvelocity: [0, 0.6],\n        health: 222,\n        damage: 60,\n        img: '../images/enemyship6.png',\n        color: \"green\",\n        blur: 0,\n        rotatable: false,\n        scale: .085, \n        shootTimerInit: 40, \n        gold: 3000,\n        value: 1.09,\n        shotsLeft: 2\n    },\n    { //BOSS 1\n        //laser in middle that flashes first. do it later in the fight when they go there\n\n        velocity: [0, 2.4],\n        endvelocity: [0, 0],\n        health: 3000,\n        damage: 60, //variable!\n        img: '../images/boss1.png',\n        color: \"red\",\n        blur: 0,\n        rotatable: false,\n        scale: .11, \n        shootTimerInit: 30,\n        shootTimerInit2: 200,  \n        shootTimerInit3: 500, \n        gold: 20000,\n        value: 0,\n        shotsLeft: 2 //variable!\n        //add the two minions\n    }\n\n\n];\n\nclass Ship {\n    constructor(position, type, background, boss = false) //more later, type?\n    {\n        this.posX = position[0];\n        this.posY = position[1];\n\n        this.collided = 0;\n\n        this.background = background;\n        this.type = type;\n        this.boss = boss;\n        this.canvasBottom = document.getElementById('game-canvas').getAttribute('height');\n        this.setup(type);\n    }\n\n    setup(type)\n    {\n        TYPES[type];\n\n        const image = new Image();\n        image.src = TYPES[type].img;\n        image.onload = () => {\n            this.image = image;\n            this.width = image.width * TYPES[type].scale;\n            this.height = image.height * TYPES[type].scale;\n        }\n        \n\n        this.velX = TYPES[type].velocity[0];\n        this.velY = TYPES[type].velocity[1];\n        this.health = TYPES[type].health; \n        this.damage = TYPES[type].damage;\n\n        this.degrees = 0;\n\n        this.color = TYPES[type].color;\n        this.blur = TYPES[type].blur;\n        this.normalVector = [0,1];\n        this.rotatable = TYPES[type].rotatable;\n\n        this.shootTimer = TYPES[type].shootTimerInit;\n        if (this.boss)\n        {\n            this.shootTimer2 = TYPES[type].shootTimerInit2;\n            this.shootTimer3 = TYPES[type].shootTimerInit3;\n        }\n        this.gold = TYPES[type].gold;\n        this.value = TYPES[type].value;\n        this.shotsLeft = TYPES[type].shotsLeft;\n        //dependent\n\n        // if(this.boss)\n        // {\n        //     this.dependencies = [];\n        //     switch (this.type)\n        //     {\n        //         case 6:\n        //             //add minions\n\n        //     }\n        // }\n    }\n\n    draw(context)\n    {\n        if (this.image)\n        {\n            if (this.rotatable) this.updateAngleAndNormalizedVector();\n            context.save();\n            context.shadowColor = this.color;\n            context.shadowBlur = this.blur;\n            context.translate(this.posX+this.width/2, this.posY+this.height/2);\n            context.rotate(this.degrees*Math.PI/180.0);\n            context.translate(-this.posX-this.width/2, -this.posY-this.height/2);\n            context.drawImage(this.image, this.posX, this.posY, this.width, this.height);\n            context.restore();\n        }\n    }\n\n    animate(context)\n    {\n        // console.log(\"posX\", this.posX);\n        // console.log(\"posY\", this.posY);\n        if(this.posY+this.height / 2 + 1 >= 0)\n        {\n            this.move();\n            this.shootProjectile();\n            this.draw(context);\n        }\n        else\n        {\n            this.posY += 1;\n        }\n    }\n\n    move()\n    {\n        if (this.collided > 1)\n        {\n            this.posX += this.velX;\n            this.posY += this.velY;\n            this.velX = this.velX * 0.9;\n            this.velY = this.velY * 0.9;\n            this.collided -= 1;\n            return;\n        }\n        else if(this.collided === 1)\n        {\n            this.posX += this.velX;\n            this.posY += this.velY;\n            this.velX = TYPES[this.type].endvelocity[0];\n            this.velY = TYPES[this.type].endvelocity[1];\n            this.collided -= 1;\n            return;\n        }\n        //to be implemented\n        if (this.type === 0)\n        {   \n            if(this.posY + 100 < this.background.player.posY)\n            {\n                if(this.posX > this.background.player.posX)\n                {\n                    this.velX = -0.4;\n                }\n                else\n                    this.velX = 0.4;\n\n                this.posX += this.velX;\n\n            }\n            this.posY += this.velY;\n            \n        }\n        else if (this.type === 1 || this.type === 4)\n        {\n            this.posX += this.velX;\n            this.posY += this.velY;\n        }\n\n        else if (this.type === 2)\n        {\n            this.posY += this.velY;\n            if(this.velY > 1.4)\n            {\n                this.velY -= 0.4;\n            }\n\n            if(this.posY + 100 < this.background.player.posY)\n            {\n                if(this.posX > this.background.player.posX)\n                {\n                    this.velX = -0.3;\n                }\n                else\n                    this.velX = 0.3;\n\n                this.posX += this.velX;\n            }\n        }\n        else if (this.type === 3)\n        {\n            this.posY += this.velY;\n            if(this.velY > 1.8)\n            {\n                this.velY -= 0.4;\n            }\n \n        }\n        else if (this.type === 5)\n        {   \n            if(this.posY + 100 < this.background.player.posY)\n            {\n                if(this.posX > this.background.player.posX)\n                {\n                    this.velX = -1;\n                }\n                else\n                    this.velX = 1;\n\n                this.posX += this.velX;\n\n            }\n            this.posY += this.velY;\n        }\n        else if (this.type === 6)\n        {\n            this.posX += this.velX;\n            this.posY += this.velY;\n            //force the minions to move exactly the same way\n            if(this.velY > 1)\n            {\n                this.velY = this.velY * 0.85;\n            }\n            else if(this.velY > .15)\n            {\n                this.velY = this.velY * 0.98;\n            }\n            else\n            {\n                this.velY = 0;\n            }\n        \n        \n            if(this.realX() > this.background.player.realX() + 100)\n            {\n                this.velX = -1;\n            }\n            else if( this.realX() + 100 > this.background.player.realX())\n                this.velX = 1;\n            else if (this.realX() > this.background.player.realX())\n            {\n                this.velX -= 0.003;\n            }\n            else if (this.realX() < this.background.player.realX())\n            {\n                this.velX += 0.003;\n            }\n\n            // this.velX += (Math.random()-Math.random()) * 0.03; //randomly moving influence\n            //make above have cooldown and much larger influence!\n\n            //idk about centering issue\n            if(this.velX > 1.5)\n            {\n                this.velX = 0.5;\n            }\n            if(this.velX < -1.5)\n            {\n                this.velX = -0.5;\n            }\n            \n\n            \n        }\n    }\n\n    // fire()\n    // {\n    //     this.shootProjectile();\n    //     // switch(this.type)\n    //     // {\n    //     //     case 0:\n    //     //         this.shootProjectile();\n    //     //         break;\n    //     //     case 1:\n    //     //         this.shootProjectile();\n    //     //         break;\n    //     //     case 2:\n    //     //         this.shootProjectile();\n    //     //         break;\n    //     //     case 3:\n    //     //         this.shootProjectile();\n    //     //         break;\n    //     // }\n    // }\n\n\n    // shootProjectile(target_x = this.realX(), target_y = this.canvasBottom)\n    shootProjectile(posX, posY, x_velocity, y_velocity)\n    {\n        let mx = posX;\n        let my = posY;\n\n        let speed;\n        let cooldown;\n        let speed2;\n        let speed3;\n        let cooldown2;\n        let cooldown3;\n        switch(this.type)\n        {\n            \n            case 0: //red ball center\n                speed = 3.3;\n                cooldown = 100;\n                \n                if(this.shootTimer <= 0)\n                {\n                    this.shootTimer = cooldown;\n                    let proj = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX(), this.realY()+30], [speed * this.normalVector[0], speed*this.normalVector[1]], 4.5, 2, 0, this.damage, 20);\n                    this.background.enemyprojectiles.push(proj);\n                    this.shotsLeft -= 1;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                    return undefined;\n                }\n                break;\n\n            case 1:\n                speed = 5.5;\n                cooldown = 150;\n                if(this.shootTimer <= 0)\n                {\n                    this.shootTimer = cooldown;\n                    let proj = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX()+40, this.realY()+30], [speed * Math.sqrt(2) / 2, speed * Math.sqrt(2) / 2], 6, 2, 1, this.damage, 20, -1 * Math.PI / 4, 3 * Math.PI / 4);\n                    this.background.enemyprojectiles.push(proj);\n\n                    let proj2 = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX()-40, this.realY()+30], [speed * -1 * Math.sqrt(2) / 2,  speed * Math.sqrt(2) / 2], 6, 2, 1, this.damage, 20, Math.PI / 4, 5 * Math.PI / 4);\n                    this.background.enemyprojectiles.push(proj2);\n\n                    let proj3 = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX()+40, this.realY()-30], [speed * Math.sqrt(2) / 2, -1 * speed * Math.sqrt(2) / 2], 6, 2, 1, this.damage, 20, 5 * Math.PI / 4, 9 * Math.PI / 4);\n                    this.background.enemyprojectiles.push(proj3);\n\n                    let proj4 = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX()-40, this.realY()-30], [speed * -1 * Math.sqrt(2) / 2,  -1 * speed * Math.sqrt(2) / 2], 6, 2, 1, this.damage, 20, 3 * Math.PI / 4, 7 * Math.PI / 4);\n                    this.background.enemyprojectiles.push(proj4);\n                    this.shotsLeft -= 1;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                    return undefined;\n                }\n                break;\n            case 2: \n                speed = 3.5;\n                cooldown = 18;\n                if (this.shotsLeft <= 0) \n                {\n                    this.shootTimer = 150;\n                    this.shotsLeft = 8;\n                    return undefined;\n                }\n                if(this.shootTimer <= 0)\n                {\n                    this.shootTimer = cooldown;\n                    let offset;\n                    if(this.shotsLeft % 2 === 0)\n                    {\n                        offset = 26.5;\n                    }\n                    else\n                    {\n                        offset = -26.5;\n                    }\n                    let proj = new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + offset, this.realY()+30], [0, speed], 0, 15, 2, 2, this.damage, 25);\n                    this.background.enemyprojectiles.push(proj);\n                    this.shotsLeft -= 1;\n                    //position, velocity, angle, length, owner, type, damage, blur=0, width=2)\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                }\n                    break;\n            case 3: \n                speed = 4;\n                cooldown = 5.5;\n                if (this.shotsLeft <= 0) \n                {\n                    this.shootTimer = 250;\n                    this.shotsLeft = 8;\n                    return undefined;\n                }\n                if(this.shootTimer <= 0)\n                {\n                    this.shootTimer = cooldown;\n                    let scatter_x = this.normalVector[0] * (Math.random(0.4) + 0.8);\n                    let scatter_y = this.normalVector[1] * (Math.random(0.4) + 0.8);\n                    let proj = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX(), this.realY()+30], [speed * scatter_x, speed*scatter_y], 4.5, 2, 3, this.damage, 20);\n                    this.background.enemyprojectiles.push(proj);\n                    this.shotsLeft -= 1;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                }\n\n                break;\n            case 4: \n                speed = 3.8;\n                cooldown = 22;\n                if (this.shotsLeft <= 0) \n                {\n                    this.shootTimer = 132;\n                    this.shotsLeft = 3;\n                    return undefined;\n                }\n                if(this.shootTimer <= 0)\n                {\n                    this.shootTimer = cooldown;\n\n                    let offset_x = 27;\n                    let offset_y = 0;// defaults for level === 1\n\n                    let rotate_scaler = this.offset(offset_x, offset_y);\n                    let rotate_scaler2 = this.offset(offset_x * -1, offset_y);\n\n                    \n                    let proj = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX() + rotate_scaler[0], this.realY()+rotate_scaler[1]], [speed * this.normalVector[0], speed*this.normalVector[1]], 5, 2, 4, this.damage, 5);\n                    let proj2 = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX() + rotate_scaler2[0], this.realY()+rotate_scaler2[1]], [speed * this.normalVector[0], speed*this.normalVector[1]], 5, 2, 4, this.damage, 5);\n                    \n                    this.background.enemyprojectiles.push(proj);\n                    this.background.enemyprojectiles.push(proj2);\n                    this.shotsLeft -= 1;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                }\n\n                break;\n            case 5:\n                \n                speed = 3.3;\n                cooldown = 30;\n                \n                if (this.shotsLeft <= 0) \n                {\n                    this.shootTimer = 125;\n                    this.shotsLeft = 2;\n                    return undefined;\n                }\n                if(this.shootTimer <= 0)\n                {\n                    this.shootTimer = cooldown;\n                    let proj = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX()-40, this.realY()+30], [speed * this.normalVector[0], speed*this.normalVector[1]], 5, 2, 5, this.damage, 20);\n                    this.background.enemyprojectiles.push(proj);\n\n                    let proj2 = new _circleDamageProjectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]([this.realX()+40, this.realY()+30], [speed * this.normalVector[0], speed*this.normalVector[1]], 5, 2, 5, this.damage, 20);\n                    this.background.enemyprojectiles.push(proj2);\n                    this.shotsLeft -= 1;\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                    return undefined;\n                }\n                break;\n            case 6: //red ball center\n                speed = 4.1;\n                cooldown = 100;\n\n                speed = 6;\n                cooldown2 = 350;\n                \n                if(this.shootTimer <= 0)\n                {\n                    this.shootTimer = cooldown;\n                    let proj = new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() + 122, this.realY()+110], [0, speed], 0, 27, 2, 0, 50, 25, 3);\n                    let proj2 = new _laserDamageProjectile__WEBPACK_IMPORTED_MODULE_1__[\"default\"]([this.realX() - 122, this.realY()+110], [0, speed], 0, 27, 2, 0, 50, 25, 3);\n            \n                    this.background.enemyprojectiles.push(proj);\n                    this.background.enemyprojectiles.push(proj2);\n\n                    //constructor(position, velocity, length, width, damage, type, angle)\n                }\n                else\n                {\n                    this.shootTimer -= 1;\n                }\n\n                if(this.shootTimer2 <= 0)\n                {\n                    this.shootTimer2 = cooldown2;\n                    let proj3 = new _laserbeam__WEBPACK_IMPORTED_MODULE_2__[\"default\"]([this.realX(), this.realY()+65], [0, 5], this.canvasBottom, 70, 50, 0);\n                    this.background.lasers.push(proj3);\n                    //constructor(position, velocity, length, width, damage, type, angle)\n                }\n                else\n                {\n                    this.shootTimer2 -= 1;\n                }\n\n    \n                break;\n\n\n            default:\n                console.error(\"unknown projectile type\");\n        }\n    }\n\n\n    //NOT SURE IF THIS WORKS\n    updateAngleAndNormalizedVector()\n    {\n        let target_x = this.background.player.realX();\n        let target_y = this.background.player.realY()   ;\n        let distX = target_x - this.realX();\n        let distY = target_y - this.realY();\n        if(distX === 0)\n        {\n            if(target_y > this.realY())\n            {\n                this.degrees = 180;\n            }\n            else\n                this.degrees = 0;\n        }\n        else if (distY === 0)\n        {\n            if(distX < 0)\n            {\n                this.degrees = 90;\n            }\n            else\n            {\n                this.degrees = 270;\n            }\n        }\n        else\n        {//beware y is on top not bototm\n            if(distX < 0)\n            {\n                this.degrees = 90 + ((Math.atan(distY / distX)) * 180.0 / Math.PI);\n            }\n            else\n            {\n                this.degrees = 270 + ((Math.atan(distY / distX)) * 180.0 / Math.PI);\n            }\n        }\n\n        length = Math.sqrt(distX * distX + distY * distY);\n        // this.normalVector = [Math.abs(distX) / length, Math.abs(distY) / length];\n        this.normalVector = [distX / length, distY / length];\n    }\n\n    realX(){ //INCOMPLETE - NEEDS TO FACTOR IN ANGLE!! ... or does it? center doesn't change when angle changes\n        return this.posX + this.width / 2;\n    }\n\n    realY(){ \n        if(this.type === 1)\n        {\n            return this.posY + this.height *.4;\n        }\n        else\n        return this.posY + this.height / 2;\n    }\n\n    //#offset returns the new (x,y) relative to center after rotating to this.degrees\n    offset(x, y) //x,y relative to center, which should be realX() and real(Y), prior to rotation\n    {\n        if(this.degrees === undefined && this.rotatable) //shouldn't need this but jic\n        {\n            this.updateAngleAndNormalizedVector();\n        }\n        \n        //apply matrix transformation of form \n        //R = |cos θ  - sin θ |\n        //    | sin θ   cos θ |\n        //to apply rotational transformation by changing basis vectors \n\n        let degrees = this.degrees; //setup\n        //usually -90 but because y is going positive going down, don't have to\n\n        let c = Math.cos(degrees * Math.PI / 180.0);\n        let s = Math.sin(degrees * Math.PI / 180.0);\n\n        return [x * c - y * s, x * s + y * c];\n    }\n\n    leftX()\n    {\n        return this.posX;\n    }\n\n    rightX()\n    {\n        return this.posX + this.width;\n    }\n\n    upY()\n    {\n        return this.posY;\n    }\n\n    downY()\n    {\n        return this.posY + this.height;\n    }\n}\n\n\n//# sourceURL=webpack:///./src/ship.js?");

/***/ }),

/***/ "./src/star.js":
/*!*********************!*\
  !*** ./src/star.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Star)\n/* harmony export */ });\n/* harmony import */ var _projectile__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./projectile */ \"./src/projectile.js\");\n\n\nclass Star extends _projectile__WEBPACK_IMPORTED_MODULE_0__[\"default\"]{\n    constructor(positionX, velocityY, size, color=\"white\")\n    {\n        super([positionX, 20], [0, velocityY], size, false, 0, color);\n        let brightest = Math.random()*4;\n        if (brightest < 1)\n        {\n            this.brightness = 255;\n        }\n        else\n        {\n            this.brightness = Math.random()*145 + 110;\n        }\n    }\n    \n\n    draw(context)\n    {\n        let that = this;\n        function setShadow(ctx, color, ox, oy, blur) {\n            ctx.shadowColor = color;\n            // ctx.shadowOffsetX = ox;\n            // ctx.shadowOffsetY = oy;\n            ctx.shadowBlur = blur;\n            // ctx.filter = `brightness(${that.brightness}%)`;\n          }\n    \n        context.beginPath();\n        context.fillStyle = `rgb(${this.brightness}, ${this.brightness}, ${this.brightness})`;\n        setShadow(context, \"white\", 0, 0, this.size*2);\n        context.arc(this.posX, this.posY, this.size, 0, 2 * Math.PI, false);\n        context.fill();\n        context.closePath();\n    }\n}\n\n\n//# sourceURL=webpack:///./src/star.js?");

/***/ }),

/***/ "./src/star3.js":
/*!**********************!*\
  !*** ./src/star3.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Star3)\n/* harmony export */ });\n// Function for create new star\nclass Star3\n{\n    constructor(x,y,z, radius, starsIndex, centerX, centerY, focalLength, starX_dir, starY_dir, innerWidth){\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.radius = radius;\n        this.color = \"white\";\n\n        this.id = starsIndex;\n        this.centerX = centerX;\n        this.centerY = centerY;\n        this.focalLength = focalLength;\n        this.starX_dir = starX_dir; \n        this.starY_dir = starY_dir;\n        this.starY_dir;\n        this.innerWidth = innerWidth;\n    }\n        \n        // Animate Stars\n    update(c){\n        this.starX = (this.x - this.centerX) * (this.focalLength / this.z);\n        this.starX += this.centerX;\n        \n        this.starY = (this.y - this.centerY) * (this.focalLength / this.z);\n        this.starY += this.centerY;\n        \n        this.starRadius = this.radius * (this.focalLength / this.z);\n        \n        this.starX += this.starX_dir;\n        this.starY += this.starY_dir;\n        \n        this.z += -10;\n        \n        if(this.z <= 0){\n            this.z = parseInt(innerWidth);\n        }\n        \n        this.draw(c);\n    \n    }\n    \n    \n    // Function for draw star\n    draw(c){\n        c.beginPath();\n        c.shadowColor = \"white\";\n        c.shadowBlur = this.starRadius * 2;\n        c.fillStyle = this.color;\n        c.arc(this.starX,this.starY,this.starRadius, 2*Math.PI, false);\n        c.fill();\n        c.closePath();\n        c.shadowBlur = 0;\n    }\n};\n\n//# sourceURL=webpack:///./src/star3.js?");

/***/ }),

/***/ "./src/starfield.js":
/*!**************************!*\
  !*** ./src/starfield.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StarField)\n/* harmony export */ });\n/* harmony import */ var _star3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./star3 */ \"./src/star3.js\");\n\n\nclass StarField\n{\n    constructor(canvas){\n        this.canvas = canvas;\n        this.context = canvas.getContext('2d');\n        this.innerWidth = window.innerWidth - 20;\n        this.innerHeight = window.innerHeight - 20;\n        this.radius = 1;\n        this.starsIndex = 0;\n        this.stars = [];\n        this.centerX = innerWidth/2;\n        this.centerY = innerHeight/2;\n        this.focalLength = 100;\n        this.starRadius = null;\n        this.starX = null;\n        this.starY = null;\n        this.numStars = 500;\n        this.mouse = {};\n        this.starX_dir = 0;\n        this.starY_dir = 0;\n        this.continue = true;\n\n\n        canvas.width = this.innerWidth;\n        canvas.height = this.innerHeight;\n\n        canvas.addEventListener('mousewheel', function(e){\n            if(e.deltaY < 0){\n            this.focalLength *= 1.1;\n            }else{\n            this.focalLength /= 1.1;\n            }\n            \n            if(this.focalLength >= this.innerWidth){\n            this.focalLength = this.innerWidth - 20;\n            }else if(this.focalLength < 100){\n            this.focalLength = 100;\n            }\n            \n        }, false);\n\n        this.start();\n    }\n\n    start()\n    {\n        for(let s = 0; s < this.numStars; s++){\n            let x = Math.random() * this.innerWidth;\n            let y = Math.random() * this.innerHeight;\n            let z = Math.random() * this.innerWidth;\n            this.starsIndex++;\n            let my_star = new _star3__WEBPACK_IMPORTED_MODULE_0__[\"default\"](x,y,z, this.radius, this.starsIndex, this.centerX, this.centerY, this.focalLength, this.starX_dir, this.starY_dir, this.innerWidth);\n            \n            this.stars[this.starsIndex] = my_star;\n        }\n\n        this.animate();\n    }\n\n    // Function for animate canvas objects\n    animate(){\n        if(this.continue){\n            let c = this.context;\n            requestAnimationFrame(this.animate.bind(this));\n            c.fillStyle = \"black\";\n            c.fillRect(0,0,this.innerWidth,this.innerHeight);\n        \n            for(let i = 1; i < 500; i++){\n                this.stars[i].update(c);\n            }\n        }\n        else\n        {\n            this.stars = null;\n        }\n\n\n        \n    }\n};\n\n//# sourceURL=webpack:///./src/starfield.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;